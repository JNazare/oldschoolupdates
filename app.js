// Generated by CoffeeScript 1.9.1
(function() {
  var FacebookStrategy, User, app, auth, bodyParser, cookieParser, db, express, favicon, logger, mongoose, passport, path, routes, session, users;

  express = require('express');

  path = require('path');

  favicon = require('static-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  mongoose = require('mongoose');

  session = require('express-session');

  passport = require('passport');

  FacebookStrategy = require('passport-facebook').Strategy;

  db = require('./models/db');

  User = mongoose.model('User');

  routes = require('./routes/index');

  users = require('./routes/users');

  auth = require('./routes/auth');

  app = express();

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.use(favicon());

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded());

  app.use(cookieParser());

  app.use(session({
    resave: false,
    saveUninitialized: false,
    secret: 'keyboard cat'
  }));

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use(passport.initialize());

  app.use(passport.session());

  passport.use(new FacebookStrategy({
    clientID: process.env.OLDSCHOOLUPDATES_FBID,
    clientSecret: process.env.OLDSCHOOLUPDATES_FBSECRET,
    callbackURL: 'http://localhost:3000/auth/facebook/callback'
  }, function(accessToken, refreshToken, profile, done) {
    console.log(profile.id);
    User.findOrCreate({
      "fbId": profile.id
    }, function(err, user) {
      if (err) {
        console.log(err);
        return done(err);
      }
      console.log(user);
      done(null, user);
    });
  }));

  passport.serializeUser(function(user, done) {
    done(null, user);
  });

  passport.deserializeUser(function(user, done) {
    done(null, user);
  });

  app.use('/', routes);

  app.use('/users', users);

  app.use('/auth', auth);

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    next(err);
  });

  if (app.get('env') === 'development') {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      res.render('error', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: {}
    });
  });

  module.exports = app;

}).call(this);
